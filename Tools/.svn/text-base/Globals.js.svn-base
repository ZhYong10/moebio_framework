 //global methods:
function typeOf(o){
	
	var type = typeof o;
	console.log("type:", type);
         //If typeof return something different than object then returns it.
	if (type !== 'object') {
		return type;
         //If it is an instance of the Array then return "array"   
	} 
	//var objectType=o.getType();//Object.prototype.getType.call(o);
	
	if (o === null) {
		return 'null';
       //if it gets here then it is an "object"
	} else if(o.getDate!=null){
		return 'Date';
	} else {
		var objectType=o.getType();
		return objectType;
	}
	console.log("[!] ERROR: could not detect type for ", o);
}
function VOID(){}
function instantiate(className, args) {
	switch(className){
		case 'Number':
		case 'String':
			return window[className](args);
		case 'Date':
			//Date is a special case that must be treated differently:
			if(!args || args.length==0) return new Date();
			if(args.length==1){
				//impure dates:
				console.log("DATEARGS", args[0]);
				if(args[0].match(/\d*.-\d*.-\d*\D\d*.:\d*.:\d*/)){
					var dateArray=args[0].split(" ");
					dateArray[0]=dateArray[0].split("-");
					if(dateArray[1]) dateArray[1]=dateArray[1].split(":");
					else dateArray[1]=new Array(0, 0, 0);
					return new Date(Date.UTC(dateArray[0][0], Number(dateArray[0][1])-1, dateArray[0][2], dateArray[1][0], dateArray[1][1], dateArray[1][2]));
				}
				//
				if(Number(args[0])!="NaN") return new Date(Number(args[0]));
				else return new Date(args[0]);
			}
			return new Date(Date.UTC.apply(null, args));
			//
		case 'Boolean':
			return window[className]((args=="false"||args=="0")?false:true);
		case 'List':
		case 'NodeList':
		case 'NumberList':
		case 'RelationList':
		case 'Polygon2D':
			return window[className].apply(window, args);
	}
	//generic instantiation of object:
    var o, f, c;
    c = window[className]; // get reference to class constructor function
    //console.log(c);
    f = function(){}; // dummy function
    f.prototype = c.prototype; // reference same prototype
    o = new f(); // instantiate dummy function to copy prototype properties
    c.apply(o, args); // call class constructor, supplying new object as context
    //o.constructor = c; // assign correct constructor (not f)
    
    return o;
}
function isArray(obj) {
   if (obj.constructor.toString().indexOf("Array") == -1)
      return false;
   else
      return true;
}
Date.prototype.getType=function(){
	return 'Date';
}
Object.prototype.isOfType=function(name){
	if(this.constructor.toString().indexOf("Array")!=-1){
		if (this._constructor!=null && this._constructor.toString().indexOf(name) == -1)
			
      		return false;
   		else
      		return true;
	}
	if (this.constructor.toString().indexOf(name) == -1)
      	return false;
   	else
      	return true;
}
