function DrawUtils(){};
DrawUtils.drawCircle=function(ctx, posX, posY, radius){
	ctx.beginPath();
	ctx.arc(posX, posY, radius, 0, Math.PI * 2, true);
	ctx.closePath();
}
/**
 * Draws a rounded rectangle using the current state of the canvas. 
 * If you omit the last three params, it will draw a rectangle 
 * outline with a 5 pixel border radius 
 * @param {CanvasRenderingContext2D} ctx
 * @param {Polygon2D} Polygon2D to draw
 * @param {Boolean} applyStroke Whether to stroke the rectangle. Defaults to false.
 * @param {Boolean} applyFill Whether to fill the rectangle. Defaults to true.
 * @param {Boolean} isClosed Whether to fill the rectangle. Defaults to true.
 */
DrawUtils.drawPolygon=function(ctx, x, y, polygon, applyStroke, applyFill, isClosed) {
	//console.log("         ------------POLyGON:", polygon);
  if (typeof applyFill == "undefined" ) {
    applyFill = false;
  }
  if (typeof applyStroke == "undefined" ) {
    applyStroke = true;
  }
  if (typeof isClosed == "undefined" ) {
    isClosed = false;
  }
  ctx.beginPath();
  var i;
  //console.log(polygon[0]);
  ctx.moveTo(Number(x) + polygon[0].x, Number(y) + polygon[0].y);
  for(i=1; i<polygon.length; i++){
  	ctx.lineTo(Number(x) + polygon[i].x, Number(y) + polygon[i].y);
  }
  if(isClosed ){
  	ctx.lineTo(Number(x) + polygon[0].x, Number(y) + polygon[0].y);
  	ctx.closePath();
  }else{
  	
  }
  if (applyStroke) {
    ctx.stroke();
  }
  if (applyFill) {
    ctx.fill();
  }        
}
/**
 * Draws a rounded rectangle using the current state of the canvas. 
 * If you omit the last three params, it will draw a rectangle 
 * outline with a 5 pixel border radius 
 * @param {CanvasRenderingContext2D} ctx
 * @param {Number} x The top left x coordinate
 * @param {Number} y The top left y coordinate 
 * @param {Number} width The width of the rectangle 
 * @param {Number} height The height of the rectangle
 * @param {Number} radius The corner radius. Defaults to 5;
 * @param {Boolean} fill Whether to fill the rectangle. Defaults to true.
 * @param {Boolean} stroke Whether to stroke the rectangle. Defaults to false.
 */
DrawUtils.drawRoundRect=function(ctx, x, y, width, height, radius, fill, stroke) {
  if (typeof fill == "undefined" ) {
    fill = true;
  }
  if (typeof stroke == "undefined" ) {
    stroke = false;
  }
  if (typeof radius === "undefined") {
    radius = 5;
  }
  var h=Number(y)+Number(height);
  ctx.beginPath();
  ctx.moveTo(Number(x) + Number(radius), y);
  ctx.lineTo(Number(x) + Number(width) - Number(radius), y);
  ctx.quadraticCurveTo(x + Number(width), y, Number(x) + Number(width), y + Number(radius));
  ctx.lineTo(Number(x) + Number(width), Number(y) + Number(height) - Number(radius));
  ctx.quadraticCurveTo(Number(x) + Number(width), h, Number(x) + Number(width) - Number(radius), Number(y) + Number(height));
  ctx.lineTo(Number(x) + Number(radius), h);
  ctx.quadraticCurveTo(x, h, x, Number(h) - Number(radius));
  ctx.lineTo(x, Number(y) + Number(radius));
  ctx.quadraticCurveTo(x, y, Number(x) + Number(radius), y);
  ctx.closePath();
  if (stroke) {
    ctx.stroke();
  }
  if (fill) {
    ctx.fill();
  }        
}
DrawUtils.pointToPixel=function(point){
	return point*96/72;
}
DrawUtils.pixelToPoint=function(pixel){
	return point*72/96;
}
DrawUtils.fillTextMultiline=function (ctx, text, posX, posY, textColor, rotation, font, fontSize) {
				var lines = text.split("\n");
				if (!rotation) rotation = 0;
				if (!font) font = "'serif'";
				if (!fontSize) fontSize = 16;
				if (!textColor) textColor = '#000000';
		 		ctx.save();
		 		ctx.font = fontSize + "px " + font;
		 		ctx.fillStyle = textColor;
		 		ctx.translate(posX, posY);
		 		ctx.rotate(rotation * Math.PI / 180);
				for (i = 0; i < lines.length; i++) {
			 		ctx.fillText(lines[i],0, i*fontSize);
				}
		 		ctx.restore();
		 	}

DrawUtils.fillTextWordWrap=function( context , text, x, y, lineHeight, fitWidth)
{
    fitWidth = fitWidth || 0;
    
    if (fitWidth <= 0)
    {
        context.fillText( text, x, y );
        return;
    }
    var words = text.split(' ');
    var currentLine = 0;
    var idx = 1;
    while (words.length > 0 && idx <= words.length)
    {
        var str = words.slice(0,idx).join(' ');
        var w = context.measureText(str).width;
        if ( w > fitWidth )
        {
            if (idx==1)
            {
                idx=2;
            }
            context.fillText( words.slice(0,idx-1).join(' '), x, y + (lineHeight*currentLine) );
            currentLine++;
            words = words.splice(idx-1);
            idx = 1;
        }
        else
        {idx++;}
    }
    if  (idx > 0)
        context.fillText( words.join(' '), x, y + (lineHeight*currentLine) );
}