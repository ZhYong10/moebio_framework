/**
* StringUtils 
* @constructor
*/
function StringUtils(){};

//TODO: should move this to TableCodifications
StringUtils.CSVtoTable=function(csvString, firstRowIsHeader, separator){
	//csvString:String,  firstRowIsHeader:Boolean=true, separator:String=null, digitalPoint:Boolean=true):Table{
	if(!csvString) return;
	var _firstRowIsHeader=firstRowIsHeader?firstRowIsHeader:true;
	csvString = csvString.replace(/ ,/g, ",");
	csvString = csvString.replace(/, /g, ",");
	csvString = csvString.replace(/ ;/g, ";");
	csvString = csvString.replace(/; /g, ";");
	csvString = csvString.replace(" ", "");
	
	var enterChar = String.fromCharCode(10);
	var lines = csvString.split(enterChar);
	if(lines.length==1){               
		enterChar = String.fromCharCode(13);
		lines = csvString.split(enterChar);
		if(lines.length==1){
			enterChar = String.fromCharCode(8232);
			lines = csvString.split(enterChar);
		}
	}
	//var array=new Array();
	var table = new Table();
	var comaCharacter=separator?separator:",";
	
	
	if(csvString==null || csvString=="" || csvString==" " || lines.length==0) return null;
	
	
	
	////
	//var nRows = blocks.length;
	
	//if(nRows==0) return null;
	//var nLists = lines[0].length;
	//if(nLists==0) return null;
	var startIndex=0;
	if(_firstRowIsHeader){
		startIndex=1;
		var headerContent = lines[0].split(comaCharacter);
	}
	
	for(i=startIndex; i<lines.length; i++){
		var cellContents = lines[i].split(comaCharacter);
		
		for(j=0; j<cellContents.length; j++){
			//var actualIndex=_firstRowIsHeader?(j-1):j;
			table[j]=table[j]?table[j]:new List();
			if(_firstRowIsHeader && i==1){
				table[j].name=headerContent[j];
				
			}
			var actualIndex=_firstRowIsHeader?(i-1):i;
			//console.log("--->", i );
			table[j][actualIndex]=Number(cellContents[j])?Number(cellContents[j]):cellContents[j];
		}

	}
	console.log("CSV TO TABLE:\n", table);
	//table.setData(array);
	return table;
}
StringUtils.cropString=function(context, string, fitWidth)
{
	if(string==null) return;
    fitWidth = fitWidth || 0;
   
    if (fitWidth <= 0 || context.measureText(string).width<=fitWidth)
    {
        return string;
    }
    //console.log("string", string);
    var chars = string.split('');
    var idx = 1;
    while (chars.length > 0 && idx <= chars.length)
    {
        var str = chars.slice(0,idx).join('');
        var w = context.measureText(str).width;
        //console.log(str, w);
        if ( w > fitWidth )
        {
            if (idx==1)
            {
                idx=2;
            }
            return chars.slice(0,idx-1).join('');
        }
        else
        {idx++;}
    }
   
}