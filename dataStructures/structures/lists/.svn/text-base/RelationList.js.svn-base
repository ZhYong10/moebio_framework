RelationList.prototype = new NodeList();
RelationList.prototype.constructor=RelationList;
/**
* RelationList
* @constructor
*/

function RelationList () {
	//FIX ME: Should use this ??? 
	var array=NodeList.apply(this, arguments);
	//
	array.name="";
   	//assign methods to array:
   	array=RelationList.fromArray(array);
   	//
   	return array;   	
}
RelationList.fromArray=function(array){
	var result=NodeList.fromArray(array);
	result.type="RelationList";
   	//assign methods to array:
   	result.addRelation=RelationList.prototype.addRelation;
   	result.addRelationIfNew=RelationList.prototype.addRelationIfNew;
   	result.removeRelation=RelationList.prototype.removeRelation;
   	result.getRelationsWithNode=RelationList.prototype.getRelationsWithNode;
	result.getAllRelationsBetweenNodes=RelationList.prototype.getAllRelationsBetweenNodes;
	return result;
}

RelationList.prototype.addRelation=function(relation){
  this.push(relation);
}
RelationList.prototype.addRelationIfNew=function(relation){
  this.addElementIfUnique(relation);
}

RelationList.prototype.removeRelation=function(relation){
  this.removeElement(relation);
}
/**
* get all relations that contain a given node
* @param {Node} node 
* @return a RelationList with relations that contain node
*/
RelationList.prototype.getRelationsWithNode=function(node){
  var i;
  var filteredRelations=new Array();
  for(i=0; i<this.length; i++){
    var relation=this[i];
    if(relation.node0==node || relation.node1==node){
      filteredRelations.push(relation);
    }
  }
  return filteredRelations;
}
/**
* get all relations between two Nodes
* @param {Node} node0 
* @param {Node} node1
* @param {Boolean} directed consider relation direction (default: false)
* @return a RelationList with relations that contain node0 and node1
*/
RelationList.prototype.getAllRelationsBetweenNodes=function(node0, node1, directed){
  var i;
  var _directed=directed || false;
  var filteredRelations=new Array();
  for(i=0; i<this.length; i++){
    var relation=this[i];
    if((relation.node0==node0 && relation.node1==node1) || (!_directed && relation.node0==node1 && relation.node1==node0) ){
      filteredRelations.push(relation);
    }
  }
  return filteredRelations;
}