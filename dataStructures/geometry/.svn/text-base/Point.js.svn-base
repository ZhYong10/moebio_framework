Point.prototype = new DataModel();
Point.prototype.constructor=Point;
/**
* Point
* @constructor
*/
function Point (x, y) {
	DataModel.apply(this, arguments);
	this.name="";
	this.type="Point";
    this.x=Number(x)||0;
    this.y=Number(y)||0;
}
Point.prototype.dist=function(point){
	return Math.sqrt(this.distSquared(point));
}
	
Point.prototype.distSquared=function(point){
	return Math.pow(Math.abs(this.x-point.x), 2)+Math.pow(Math.abs(this.y-point.y), 2);
}
Point.prototype.getLength=function(){
	return Math.sqrt( (this.x*this.x) + (this.y*this.y));
}
Point.prototype.clone=function(){
	return new Point(this.x, this.y);
}
Point.prototype.toString=function(){
	return "(x="+this.x+", y="+this.y+")";
}
Point.prototype.cross=function(point){
	return this.x * point.y - this.y * point.x;
}
Point.prototype.subtract=function(point){
	return new Point(point.x-this.x, point.y-this.y);
}
Point.prototype.add=function(point){
	return new Point(point.x+this.x, point.y+this.y);
}
//TODO: verify if should implement method using dot product
/* Get the angle between two Points
 * http://www.euclideanspace.com/maths/algebra/vectors/angleBetween/index.htm
 * @param {Point} point 
 * @return {Number} the angle betweet two Points in radians
 * 
 */
Point.prototype.angle=function(point){
	return Math.atan2(point.y,point.x) - Math.atan2(this.y, this.x);
}
/*
 * 
 * @param {Point} point segonc point to calculate dot product.
 * @return {Number} The return value is the cosine of the angle between the two input vectors, multiplied by the lengths of those vectors. So, you can easily calculate the cosine of the angle by either, making sure that your two vectors are both of length 1, or dividing the dot product by the lengths.
 */
Point.prototype.dot=function(point){
	return this.x * point.x + this.y * point.y;
}