Point3D.prototype = new Point();
Point3D.prototype.constructor=Point3D;
/**
* Point3D
* @constructor
*/
function Point3D (x, y, z) {
	Point.apply(this, arguments);
	this.name="";
	this.type="Point3D";
    this.z=Number(z)||0;
}
Point3D.prototype.dist=function(point){
	return Math.sqrt(this.distSquared(point));
}
	
Point3D.prototype.distSquared=function(point){
	return Math.pow(Math.abs(this.x-point.x), 2)+Math.pow(Math.abs(this.y-point.y), 2)+Math.pow(Math.abs(this.z-point.z), 2);
}
Point3D.prototype.getLength=function(){
	return Math.sqrt( (this.x*this.x) + (this.y*this.y) + (this.z*this.z));
}
Point3D.prototype.clone=function(){
	return new Point3D(this.x, this.y, this.z);
}
Point3D.prototype.toString=function(){
	return "(x="+this.x+", y="+this.y+", z="+this.z+")";
}
Point3D.prototype.cross=function(point3D){
	var _x = this.y*point3D.z - this.z*point3D.y;
	var _y = this.z*point3D.x - this.x*point3D.z;
	var _z = this.x*point3D.y - this.y*point3D.x;
	return new Point3D(_x, _y, _z);
}
Point3D.prototype.dot=function(point3D){
	return this.x*point3D.x + this.y*point3D.y + this.z*point3D.z;
}



