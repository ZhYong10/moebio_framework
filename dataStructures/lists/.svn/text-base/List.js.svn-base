List.prototype = new DataModel();
List.prototype.constructor=List;
/**
* List A List of Objects (wraps Array functionality and provides subclassing)
* @param comma separated values to add to List
* @constructor
*/
function List () {
	DataModel.apply(this);
	var array=new Array();
	var i;
	for(i=0; i<arguments.length; i++){ 
	 	array.push(arguments[i]);
   	}
   	array=List.fromArray(array);
   	//
   	return array;
   	
}

List.fromArray=function(array){
	array.type="List";
	array.name="";
   	//assign methods to array:
   	array.setType=List.prototype.setType;
   	array.getType=List.prototype.getType;
   	array.setArray=List.prototype.setArray;
   	array.pushIfUnique=List.prototype.pushIfUnique;
   	array.removeElement=List.prototype.removeElement;
   	array.getElementsRepetitionCount=List.prototype.getElementsRepetitionCount;
   	array.getMin=List.prototype.getMin;
   	array.getMax=List.prototype.getMax;
   	//operators:
   	array.add=List.prototype.add;
   	array.multiply=List.prototype.multiply;
   	//sort:
   	array.sortIndexed=List.prototype.sortIndexed;
   	array.sortNumericIndexed=List.prototype.sortNumericIndexed;
   	array.sortNumeric=List.prototype.sortNumeric;
   	array.sortNumericIndexedDescending=List.prototype.sortNumericIndexedDescending;
   	array.sortNumericDescending=List.prototype.sortNumericDescending;
   	array.sortOnIndexArray=List.prototype.sortOnIndexArray;	
   	array._splice=Array.prototype.splice;
   	array.splice=List.prototype.splice;	
   	array.clone=List.prototype.clone;
   	array.toString=List.prototype.toString;
   	array._constructor=List;

   	return array;
}
//

List.prototype.toString=function(){
	var i;
	var str="[";
	for(i=0; i<this.length-1; i++){
		str+=this[i]+", "
	}
	str+=this[this.length-1]+"]";
	return str;
	
}

List.prototype.splice=function(){
	var array=this._splice.apply(this, arguments);
	//console.log(this.type);
	try{
		return eval(this.type).fromArray(array);
	}catch(err){
		return array;
	}
	
}

List.prototype.clone=function(){
  	var i=0;
	var clonedList=eval("new "+this.type+"()");
  	for(i=0; i<this.length; i++){
    	clonedList.push(this[i]);
  	}
  	return clonedList;
}
List.prototype.pushIfUnique=function(element){
  var i=0;
  var exists=false;
  for(i=0; i<this.length; i++){
    if(this[i]==element){
      exists=true;
      break;
    }
  }
  if(!exists) this.push(element);
}
List.prototype.removeElement=function(element){
  var i=0;
  for(i=0; i<this.length; i++){
    if(this[i]==element){
      this.splice(i, 1);
      break;
    }
  }
}
List.prototype.getElementsRepetitionCount=function(sortListsByOccurrences){	
	var obj;
	var elementList= new Array();
	var numberList = new Array();
	var nElements = this.length;
	var index;
	
	for(i=0; i<nElements; i++){
		obj = this[i];
		index = elementList.indexOf(obj);
		if(index!=-1){
			numberList[index]++;
		} else {
			elementList.push(obj);
			numberList.push(1);
		}
	}
	
	//elementList = improveList(elementList);
	//var table = OperatorsTable.improveTable(new Table( elementList, numberList ));
	var table = new Table( elementList, numberList );
	if(sortListsByOccurrences?sortListsByOccurrences:true){
		table = table.sortOnIndexArray(numberList);//OperatorsTable.sortListsByNumberList(table, numberList);
	}
	
	return table;
}
List.prototype.getMin=function(){
	if(this.length==0) return null;
	var min=this[0];	
	var i;
	for(i=1; i<this.length; i++){
		min=Math.min(min, this[i]);
	}
	return min;
}
List.prototype.getMax=function(){
	if(this.length==0) return null;
	var max=this[0];	
	var i;
	for(i=1; i<this.length; i++){
		max=Math.max(max, this[i]);
	}
	return max;
}	
List.prototype.add=function(value){
	if(value.constructor==Number){
		var i;
		var array=eval("new "+this.type+"()");
		for(i=0; i<this.length; i++){
			array.push(this[i]+value);
		}
		return array;
	}
}

List.prototype.multiply=function(value){
	if(value.constructor==Number){
		var i;
		var array=new Array()
		for(i=0; i<this.length; i++){
			array.push(this[i]+value);
		}
		return array;
	}
}

List.prototype.sortIndexed=function() {
	var index = new Array();
	var i;
	for(i=0; i<this.length; i++){
  		index.push({index:i, value:this[i]});
	}
	var comparator = function(a, b) {
  		var array_a = a.value;
  		var array_b = b.value;;

  		return array_a < array_b ? -1 : array_a > array_b ? 1 : 0;
	}
	index=index.sort(comparator);
	var result = new NumberList();
	for(i=0; i<index.length; i++){
  		result.push(index[i].index);
	}
	return result;
}
List.prototype.sortNumericIndexed=function() {
	var index = new Array();
	var i;
	for(i=0; i<this.length; i++){
  		index.push({index:i, value:this[i]});
	}
	var comparator = function(a, b) {
  		var array_a = a.value;
  		var array_b = b.value;;

  		return array_a - array_b;
	}
	index=index.sort(comparator);
	var result = new NumberList();
	for(i=0; i<index.length; i++){
  		result.push(index[i].index);
	}
	return result;
}
List.prototype.sortNumeric=function(){
	var comparator=function(a, b){
		return a - b;
	}
	return this.sort(comparator);
} 
List.prototype.sortOnIndexArray=function(list){
	//FIXME:
	var index = new Array();//NumberList();
	var result = new List();
	var i;
	for(i=0; i<this.length; i++){
  		index.push({index:list[i], value:this[i]});
	}
	
	var comparator = function(a, b) {
		console.log(a, b, index[a], index[b]);
  		var array_a = a.index;
  		var array_b = b.index;

  		return array_a - array_b;
	}
	var res=index.sort(comparator);
	for(i=0; i<res.length; i++){
  		result.push(res[i].value);
	}
	return result;
} 
List.prototype.sortNumericIndexedDescending=function() {
	var index = new Array();//NumberList();
	var i;
	for(i=0; i<this.length; i++){
  		index.push({index:i, value:this[i]});
	}
	var comparator = function(a, b) {
  		var array_a = a.value;
  		var array_b = b.value;
		//console.log(this[a], this[b], array_b - array_a);
  		return array_b - array_a;
	}
	index=index.sort(comparator);
	var result=new NumberList();
	for(i=0; i<index.length; i++){
  		result.push(index[i].index);
	}
	return result;
}
List.prototype.sortNumericDescending=function(){
	var comparator=function(a, b){
		return b - a;
	}
	return this.sort(comparator);
} 
List.prototype.sortOnNumberList=function(list){
	return new List(this.data.sortOnNumberList(list.getData));
} 

//STATIC:
List.concatWithoutRepetitions=function(){
	var i;
	var newList=arguments[0].clone();
	for(i=1; i<arguments.length; i++){
		var addList=arguments[i];
		var nElements = addList.length;
		//if((list0 is NumberList || list0 is StringList) && (list0 is NumberList || list0 is StringList)){
		for(var i=0; i<nElements; i++){
			if(newList.indexOf(addList[i])==-1) newList.push(addList[i]);
			//if(OperatorsList.indexOfElement(list0, list1[i])==-1) newList.push(list1[i]);
		}
	} /*else {
		for(i=0; i<nElements; i++){
			//if(list0.indexOf(list1[i])==-1) newList.push(list1[i]);
			if(OperatorsList.indexOfElement(list0, list1[i])==-1) newList.singlePush(list1[i]);
		}
	}*/
	return newList;//improveList(newList);
}






/*
List.prototype.concat(){
	this.data.concat()
}	Joins two or more arrays, and returns a copy of the joined arrays
indexOf()	 
join()	Joins all elements of an array into a string
pop()	Removes the last element of an array, and returns that element
push()	Adds new elements to the end of an array, and returns the new length
reverse()	Reverses the order of the elements in an array
shift()	Removes the first element of an array, and returns that element
slice()	Selects a part of an array, and returns the new array
sort()	Sorts the elements of an array
splice()	Adds/Removes elements from an array
toString()	Converts an array to a string, and returns the result
unshift()	Adds new elements to the beginning of an array, and returns the new length
valueOf()	Returns the primitive value of an array
*/


List.prototype.getElementsRepetitionCount=function(sortListsByOccurrences){	
			var obj;
			var elementList= new List();
			var numberList = new List();
			var nElements = this.length;
			var index;
			
			for(i=0; i<nElements; i++){
				obj = this[i];
				index = elementList.indexOf(obj);
				if(index!=-1){
					numberList[index]++;
				} else {
					elementList.push(obj);
					numberList.push(1);
				}
			}
			
			//elementList = improveList(elementList);
			//var table = OperatorsTable.improveTable(new Table( elementList, numberList ));
			var table = new Table( elementList, numberList );
			if(sortListsByOccurrences?sortListsByOccurrences:true){
				table = table.sortOnIndexArray(numberList);//OperatorsTable.sortListsByNumberList(table, numberList);
			}
			
			return table;
		}